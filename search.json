[{"title":"【NLP】Day 2: 工欲善其事，必先利其器！Python基礎介紹！","url":"/2022/09/03/%E3%80%90NLP%E3%80%91Day-2-%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8%EF%BC%81Python%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9%EF%BC%81/","content":"<blockquote>\n<p>萬事開頭難，難就難在初始階段。在此期間，必須窮盡心力，使諸方面保持均衡，以利於今後的發展。<br>法蘭克・赫伯特《沙丘》</p>\n</blockquote>\n<p>在一起踏上偉大的航道前，由於在這三十天會運用Python作為主要的程式語言，所謂工欲善其事，必先利其器，畢竟就連魯夫一開始出海前，也是需要一艘船嘛！所以免不了總是要稍微解釋一下在之後的文章會用到的簡單語法以及概念。</p>\n<p>但因為在我之前已經有許多大神以及前輩寫了許多Python的教學文章，Python開發者社群也有翻譯官方文件，而且翻譯得非常清楚，所以今天這篇文章只會解釋Python中最常用的語法，也就是基本的資料型態、for迴圈以及if條件敘述式，還有function，也會解釋一份Python的程式，大致上會有什麼架構，畢竟大學的計算機概論教授有云：「你只要會寫for迴圈以及會寫if，你會寫程式啦！」有點誇張了，但相信你可以的。</p>\n<p>不過如果之後的文章用到其他在這裡沒有解釋到的語法，也會在那篇文章特別介紹。</p>\n<h2 id=\"資料型態以及資料結構\"><a href=\"#資料型態以及資料結構\" class=\"headerlink\" title=\"資料型態以及資料結構\"></a>資料型態以及資料結構</h2><p>Python共有種的資料型態以及種的資料結構，不同的型態與結構，在不同的使用情境下有不同的用途，以下幫助你簡單理解：</p>\n<h3 id=\"字串-string\"><a href=\"#字串-string\" class=\"headerlink\" title=\"字串 string\"></a>字串 <code>string</code></h3><p>字串顧名思義就是單純字串，一般來說會以雙引號來表示，例如<code>&quot;偉大航道&quot;</code>就是一種字串，但單引號也可以，像是<code>&#39;偉大航道&#39;</code>，只是大部分都會用雙引號，而且字串也不能進行數學上的四則運算，在程式編寫上要特別留意。性質如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;1&quot;</span>+<span class=\"string\">&quot;2&quot;</span>+<span class=\"string\">&quot;3&quot;</span>) </span><br><span class=\"line\"><span class=\"comment\"># output: 123</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以將其他種資料型態透過<code>str()</code>轉換成字串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">123</span></span><br><span class=\"line\">num_string = <span class=\"built_in\">str</span>(num)</span><br><span class=\"line\"><span class=\"built_in\">type</span>(num_string)</span><br><span class=\"line\"><span class=\"comment\"># output: str</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"整數-int-amp-浮點數-float\"><a href=\"#整數-int-amp-浮點數-float\" class=\"headerlink\" title=\"整數 int &amp; 浮點數 float\"></a>整數 <code>int</code> &amp; 浮點數 <code>float</code></h3><p>整數就是整數，這不需要特別說明。浮點數就是有小數點的數字，也就是小數！而這兩種資料型態分別可以透過<code>int()</code>以及<code>float()</code>來轉換。這兩種資料型態可以進行四則運算，讓我們來看看以下例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span>+<span class=\"number\">2</span>+<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># output: 6</span></span><br></pre></td></tr></table></figure>\n\n<p>前面已經了解到，資料型態也可以用對應的函式互相轉換，但要特別注意的是，不同資料型態不能混在一起運算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">123</span>+<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-<span class=\"built_in\">input</span>-<span class=\"number\">3</span>-a752e60be039&gt; <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">----&gt; <span class=\"number\">1</span> <span class=\"number\">123</span>+<span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: unsupported operand <span class=\"built_in\">type</span>(s) <span class=\"keyword\">for</span> +: <span class=\"string\">&#x27;int&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>但浮點數跟整數間可以進行四則運算嗎？我們來試試看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.23</span>+<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\"># output: 124.23</span></span><br></pre></td></tr></table></figure>\n<p>這兩者之間由上可知是可以進行四則運算的喔！</p>\n<h3 id=\"串列-list\"><a href=\"#串列-list\" class=\"headerlink\" title=\"串列 list\"></a>串列 <code>list</code></h3><p><code>list</code>用中括號表示，可以將前述講到的資料，像火車一樣一個一個分別存在不同車廂裡面，並以逗號分隔。即使不同資料型態也可以一起放進去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建立新的空串列，並命名為example</span></span><br><span class=\"line\">example = []</span><br><span class=\"line\"><span class=\"comment\"># 預設資料</span></span><br><span class=\"line\">example = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\"># 將資料加入串列的最尾端</span></span><br><span class=\"line\">example.append(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(example)</span><br><span class=\"line\"><span class=\"comment\"># output: [1, 2, 3, 123]</span></span><br><span class=\"line\"><span class=\"comment\"># 不同的資料型態也可以存在同一個串列中</span></span><br><span class=\"line\">example.append(<span class=\"string\">&quot;海賊王&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(example)</span><br><span class=\"line\"><span class=\"comment\"># output: [1, 2, 3, 123, &quot;海賊王&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 轉換方式則可以透過list()，如：</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典-dictionary\"><a href=\"#字典-dictionary\" class=\"headerlink\" title=\"字典 dictionary\"></a>字典 <code>dictionary</code></h3><p><code>dictionary</code>則是用大括號表示，是python特有的資料型態，像是字典一樣，每個字都有其對應的意義。那麼當值與值之間互相對應的時候，就可以透過<code>dict()</code>來表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建立新的空字典，並命名為example</span></span><br><span class=\"line\">example = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 字典形式分成key跟value，每個key有對應的value，並用冒號表示：</span></span><br><span class=\"line\">example = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;魯夫&quot;</span>: <span class=\"string\">&quot;船長&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;索隆&quot;</span>: <span class=\"string\">&quot;戰鬥員&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;娜美&quot;</span>: <span class=\"string\">&quot;航海士&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 並透過以下方式取出值（value）：</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(example[<span class=\"string\">&#x27;魯夫&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># output: 船長</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python語法\"><a href=\"#Python語法\" class=\"headerlink\" title=\"Python語法\"></a>Python語法</h2><p>那接下來就讓我們來看看可以透過哪些方式操作以上這些資料吧！</p>\n<h3 id=\"for迴圈\"><a href=\"#for迴圈\" class=\"headerlink\" title=\"for迴圈\"></a><code>for</code>迴圈</h3><p><code>for</code>迴圈，顧名思義，如果你需要重複做某件相同的事時，就可以透過<code>for</code>迴圈讓程式來幫你做，你可以指定迴圈運行的次數，或是讓迴圈「遍歷」串列或是字典的key或是value，但方式有點不一樣。常用的寫法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> example:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 123</span></span><br><span class=\"line\"><span class=\"comment\"># 海賊王</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字典本身不能遍歷，但可以遍歷key或是value</span></span><br><span class=\"line\">example = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;魯夫&quot;</span>: <span class=\"string\">&quot;船長&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;索隆&quot;</span>: <span class=\"string\">&quot;戰鬥員&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;娜美&quot;</span>: <span class=\"string\">&quot;航海士&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> example.key():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\"><span class=\"comment\"># 魯夫</span></span><br><span class=\"line\"><span class=\"comment\"># 索隆</span></span><br><span class=\"line\"><span class=\"comment\"># 娜美</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> example.values(): <span class=\"comment\"># 要加s</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\"><span class=\"comment\"># 船長</span></span><br><span class=\"line\"><span class=\"comment\"># 戰鬥員</span></span><br><span class=\"line\"><span class=\"comment\"># 航海士</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for</code>迴圈也有另外一種常見的寫法，我們來看看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 123</span></span><br><span class=\"line\"><span class=\"comment\"># 海賊王</span></span><br></pre></td></tr></table></figure>\n<p>其中用到了兩個之前沒用過的函式，分別是<code>range()</code>以及<code>len()</code>，<code>range()</code>中的參數代表的就是讓<code>i</code>運行這個次數，<code>len()</code>則是串列的長度，那這行就是讓<code>for</code>迴圈運行串列長度的次數。</p>\n<h3 id=\"if條件敘述式\"><a href=\"#if條件敘述式\" class=\"headerlink\" title=\"if條件敘述式\"></a><code>if</code>條件敘述式</h3><p>當程式達到某特定條件時，可以透過<code>if</code>，指定程式執行其他動作，一般會在迴圈中使用。用法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"comment\"># output: 海賊王</span></span><br></pre></td></tr></table></figure>\n<p>若有不同條件，則可以透過<code>elif</code>來指定條件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"comment\"># output: </span></span><br><span class=\"line\"><span class=\"comment\"># 海賊王</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n\n<p>若執行了<code>if</code>就不會執行<code>elif</code>，若包含<code>elif</code>條件就只能擇一。但如果全部都寫<code>if</code>就所有條件都會檢驗一遍。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<p>最後前面的條件都不符合，但也要對其進行處理，則可以用<code>else</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是else&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是else&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>跳出迴圈可以用<code>break</code>，繼續執行迴圈可以用<code>continue</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">example = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">123</span>, <span class=\"string\">&quot;海賊王&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(example)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"string\">&quot;海賊王&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我是else&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>好的！大致上會用到的基本語法就是這樣，明天就要進入偉大航道了，我們明天見。</p>\n"},{"title":"【NLP】Day 1: 前往NLP的偉大航道！一起成為我的夥伴吧！","url":"/2022/09/01/%E3%80%90NLP%E3%80%91%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80%E8%99%95%E7%90%86/","content":"<blockquote>\n<p>擁有財富、名聲、勢力，擁有整個世界的海賊王，哥爾・D・羅傑，他在臨刑前的一句話讓人們趨之若鶩，奔向大海。<br>「想要我的財寶嗎？想要的話可以全部給你，去找吧，我把所有財寶都放在這裡」<br>於是所有男子漢航向偉大的航道追逐夢想，世界開始迎接大海賊時代的來臨。<br>《海賊王》第一話〈Romance Dawn 冒險的黎明〉</p>\n</blockquote>\n<h2 id=\"NLP？那是什麼？可以吃嗎\"><a href=\"#NLP？那是什麼？可以吃嗎\" class=\"headerlink\" title=\"NLP？那是什麼？可以吃嗎\"></a>NLP？那是什麼？可以吃嗎</h2><p>筆者自從就讀語言所這一年多以來，很多人都會問我：「咦？Milan，你讀語言所，啊你是唸什麼的呀？」，我都會說：「喔！我是唸計算語言學，做自然語言處理的。NLP啦！」只是往往這麼回答朋友還是親戚們，他們臉上都還是會掛著大大的問號。好啦，有些人可能會知道NLP是什麼，他們會說：「喔喔喔！我知道！就是神經語言處理啦！欸，我覺得那個很有用耶，可以幫助我們用另一個角度來看待事情。」<br></br><br>事實上，自然語言處理（Natural Language Processing）跟神經語言處理（Neural Language Processing）是兩件完全不同的領域。<br></br><br>自然語言處理，根據維基百科的定義，是<strong>人工智慧</strong>跟<strong>語言學</strong>的跨領域學科，藉由<em>讓電腦將輸入語言轉換成有意義的符號和關係</em>，或是將語言轉換成電腦可以理解的數據，並透過機器學習模型來解決各種問題，例如<em>文本分類</em>、<em>文本生成</em>、<em>情感分析</em>以及<em>自然語言理解</em>、<em>聊天機器人</em>等等族繁不及備載的應用方式，其中的技術包含認知、理解、生成等三大部分。討論到人工智慧，大家可能也會想到先前Google所開發，聲稱已具有「人格意識」的語言人工智慧LaMDA，其實這也是自然語言處理的一環，但至於其是否真的有「自我意識」，可能就還有待商榷。<br></br><br>嗯？你問說那神經語言處理是什麼，我覺得這部分對我來說有點玄，<del>可能要問一下洪蘭教授，或者是問天了。</del><br></br><br>說了這麼多冠冕堂皇的定義解釋，大家可能也還不是很理解自然語言處理到底是在做什麼。想問一下各位是否曾經被「祖」過？臉書的演算法都會藉由偵測人們分享在社群中的貼文是否包含仇恨言論，並且決定後續的動作，如果貼文被刪除並被禁文三十天，就是被「祖」了。YouTube也會透過演算法判斷影片內容是否適合廣告商投放，YouTube也會判斷題材內容是否適合提供大眾觀賞等等，若不適合則投以黃標；另外，像是最近很紅的假新聞議題，如何透過程式語言去偵測，藉此去預防假新聞的過度氾濫。以上種種，都是需要運用自然語言處理的技術來解決的。<br></br><br>可是這項技術到目前為止的發展足夠成熟嗎？目前的人工智慧真的有這麼厲害嗎？想先問問大家是否曾經有過、或是看過別人有過被演算法耽誤的類似經驗，比如說明明只是想跟朋友分享某部動漫給了很多「殺必死」，但卻因為「殺」跟「死」被臉書判斷成帶有仇恨言論，莫名其妙地被禁言三十天，何其無辜？或者是作為影音創作者，在影片中可能也不太知道說了或做了什麼事，就被黃標。類似的演算法錯誤判斷的案例層出不窮。這也是為什麼到最後其實Meta跟YouTube到後來也逐漸改回用人工的方式進行審查，畢竟就現有的技術來說，人工審查的正確比例還是比機器高的許多。只是人工審查又可能有標準不一的問題，不同的人判斷事情有不同的標準；對於演算法來說，也同樣會有不同標準的議題需要討論，但這又是另一個層面的問題了。<br></br><br>綜上所述，其實我們可以發現，計算語言學、自然語言處理、人工智慧還有非常非常大進步的空間。誇張一點，在我們開發出像哆啦A夢或是《銀翼殺手 Blade Runner》裡面的仿生人、《西部世界 Westworld》裡面的接待員之前，永遠都還有非常大的發展餘地。就像是《Bleach》裡面，涅繭利對上第八十刃・薩爾阿波羅所說：「我討厭完美，一旦完美就再沒有進步的餘地，也沒有創造的空間。這代表智慧與才能都將無用武之地了，對我們科學家來說，完美就是絕望。」（這比喻也太宅…）這也是人類逐漸走向進步與未來所必備的進程之一，而我們都只是這巨大的洪流中的一隻隻小蝦米而已。<br></br><br><img src=\"https://hips.hearstapps.com/hmg-prod/images/screen-shot-2019-07-24-at-1-29-59-pm-1563989459.png\"></p>\n<p>圖一、《銀翼殺手》中最後羅伊・巴蒂對戴克所說的雨中獨白，探討何謂「意識」、何謂「人」</p>\n</br>\n\n<p><img src=\"https://www.tvinsider.com/wp-content/uploads/2022/08/evan-rachel-wood_-westworld-season-4-finale.jpg\"></p>\n<p>圖二、《西部世界》中，希望不管是人或是接待員都能擁有真正自由的迪樂芮</p>\n</br>\n扯遠了。是說，雖然計算語言學/自然語言處理可以大至Google的LaMDA模型，小至假新聞、臉書貼文審查。這麼一說，自然語言處理真的離我們這麼遠嗎？在我踏進這艘賊船的這兩三年，我發現好像其實也不是這麼一回事。在迎接人工智慧的時代來臨，有些人會擔心人工智慧是否會取代人類；我是認為，好好地了解這些平常在我們的日常生活中無處不在的人工智慧，還有他們的運作方式，才不會被人工智慧所駕馭，就如同唐鳳所說，AI應該是輔助式智慧，幫助人類相輔相成。更不該因為是AI，就放棄了這個社會所堅持的價值。\n</br>\n\n<h2 id=\"踏上偉大航道前的必備：紀錄指針\"><a href=\"#踏上偉大航道前的必備：紀錄指針\" class=\"headerlink\" title=\"踏上偉大航道前的必備：紀錄指針\"></a>踏上偉大航道前的必備：紀錄指針</h2><p>在踏入這領域的這兩三年，其實學習自然語言處理的路上，就跟魯夫一樣，一路上找尋夥伴，在一座座的島嶼冒險，過程有哭有笑，<del>可能還死哥哥（都過幾年，魯夫都已經move on了，這不算爆雷吧？）</del>，最終抵達拉乎德爾，找到魯夫心目中真正的大秘寶。自然語言處理亦然，在偉大航路前半段的樂園，先逐漸了解基礎文本處理、慢慢接觸到模型後，漸漸地體認到這個世界有多大，直到進入偉大航路後半段的新世界，已經可以熟用霸氣後，學會應用各種技能，並開始認識自然語言處理中的巨人等等，一路雖然辛苦，但我想會很值得。<br></br><br>因此，我在這三十天的鐵人賽中，將會介紹一些成為語言資料科學家常會用到的技能，也當作自己學習路上的紀錄。俗話說：「師父領進門，修行在個人。」在接下來的文章中，將會嘗試著用最粗淺的語言來解釋現今文本處理的入門技術及應用，且將會使用Python作為主要的語言，希望可以作為讀者的紀錄指針，將各位引領至計算語言學的偉大航道。內容將包含：</p>\n<ul>\n<li>文本處理的東方藍：資料預處理<ul>\n<li>基礎Python</li>\n<li>正規表達式（regular expression）:檢查、搜尋、抽取</li>\n<li>斷詞（segmentation）: Articut、CKIP、Jieba</li>\n<li>斷詞層級與處理（segmentation）: tokenization、lemmatization、stemming</li>\n</ul>\n</li>\n<li>開始踏上偉大航道：文本計算<ul>\n<li>Bag of Words、TF-IDF、N-Gram</li>\n<li>Word2Vec</li>\n<li>機器學習：貝氏分類器</li>\n<li>機器學習：羅吉斯迴歸</li>\n</ul>\n</li>\n<li>這裡就是新世界了！<ul>\n<li>深度學習！<ul>\n<li>人工神經網路（Artificial Neural Network, ANN）</li>\n<li>遞迴神經網路（Recurrent Neural Network, RNN）</li>\n<li>長短期記憶模型（Long Short-Term Memory, LSTM）</li>\n<li>長短期記憶模型（Bidirectional Long Short-Term Memory, BiLSTM）</li>\n</ul>\n</li>\n<li>特別篇：Loki</li>\n</ul>\n</li>\n<li>冥王雷利補習班：實戰篇<ul>\n<li>網路爬蟲</li>\n<li>用Flask架出你的第一個網頁</li>\n<li>利用Docker在虛擬環境佈署專案</li>\n<li>資料存儲：資料庫建置與應用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"環境建置\"><a href=\"#環境建置\" class=\"headerlink\" title=\"環境建置\"></a>環境建置</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>因為在接下來的文章中，將會使用Python作為主要的程式語言。因此在一起踏上旅程前，要請你先把Python的環境建置起來。這部分因為網路上也已經有族繁不及備載的教學文章，甚至影片，所以在這邊也不再贅述。請讀者按照系統到所屬的網頁建置環境：</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-tw/windows/python/beginners\">Windows</a></li>\n<li><a href=\"https://docs.python.org/zh-tw/3/using/mac.html\">OS X</a></li>\n<li><a href=\"https://ubunlog.com/zh-TW/python-3-9-como-instalar-en-ubuntu-20-04/?_gl=1*xg80z2*_ga*YW1wLWk0TmRyYml2cTFVUVAtWjdGVEVHRDJkRk5kT3NyQUxtR0RIQmJ4TjFob2NmSVA0U1Atczk1cEhPNGs0Ukl6S3c\">Ubuntu</a>: 都已經用烏班圖了，應該也會建置環境了吧？</li>\n</ul>\n<h3 id=\"編譯器\"><a href=\"#編譯器\" class=\"headerlink\" title=\"編譯器\"></a>編譯器</h3><p>如果你是初學者，你可以使用Jupyter Notebook，或者是Google Colaboratory；但學習到了一定階段，都會需要轉移到原始碼編輯器上運行，才會得到完整的開發體驗。在寫程式時，每個人都會有習慣的原始碼編輯器，各自有各自的優點，你可以選擇自己喜歡的原始碼編輯器做使用。</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\">VSCODE</a>: 微軟開發的編輯器，很多外掛跟好用的介面，是我自己常用的原始碼編輯器。</li>\n<li><a href=\"https://wingware.com/\">WingPro</a>: 專為Python打造的編輯器。之前實習公司前老闆的愛用編輯器。</li>\n<li><a href=\"https://www.sublimetext.com/\">Sublime Text</a>: 簡單好用，畫面介面簡潔不複雜。在學校的現任老闆的愛用編輯器</li>\n<li><a href=\"https://notepad-plus-plus.org/\">NotePad++</a>: 台灣工程師開發的編輯器，開源好用，且為世界的不公不義做出了許多行動打抱不平。</li>\n</ul>\n","categories":["自然語言處理"],"tags":["NLP","自然語言處理"]},{"title":"【碎碎念】你滿意你自己的答案嗎？","url":"/2022/08/30/%E3%80%90%E7%A2%8E%E7%A2%8E%E5%BF%B5%E3%80%91%E6%88%91%E9%82%84%E6%98%AF%E5%8E%9F%E4%BE%86%E7%9A%84%E6%88%91/","content":"<p>前陣子跟研究室的學姊在看code，我在提我的看法，討論到一半，學姊突然跟我說：「其實能感覺得出來米蘭很努力試著不要傷到我們耶，但其實你可以直接說沒關係，我們很堅強。」</p>\n<p>但我有我的堅持。而這些堅持背後其來有自。</p>\n<p>還記得大二選修心理語言學，這門課除了課本內的知識以外，也需要閱讀老師的指定論文，並在上課時與老師討論，期末報告也要以那些論文為基礎，再繼續往下延伸。以開設在大學部的課程來說，是非常重的一門課，不過老師主要也是想藉由這門課招募想投遞科技部計畫的學生。</p>\n<p>印象很深刻的是，有名研究生來下修這門課。有時候有些人只要一開口你就知道很強很優秀很有能力，而在當時的我眼中，這位研究生學長就是其中之一。</p>\n<p>在期末報告時，他非常挑戰性地針對我們研究報告的基本假設提出了一個問題，組內的心理系學長回答過後，問他不知道這樣回答是否有滿足（satisfy）他的疑問。其實聽了學長的回答，覺得好像沒有搔到問題的癢處，但我自己當下也想不出其他比學長還要更好的回答了，正當帶著有點僥倖心態，想著這樣也罷的同時，研究生學長用著同樣非常具有攻擊性的語氣用英文答：<br></br><br>「你滿意你自己的答案嗎？」<br>（Are you satisfied with your own answer?）<br></br><br>學長說的這句話，內心聽了很不舒服，也有點羞愧，覺得自己應該可以做得更好，也對我這個研究小白來說是一記當頭棒喝。因此之後也對這件事給自己下了結論：</p>\n<p>我並不是很認同研究生學長的回饋方式，我認為在給予回饋的同時，如能減少一點攻擊性、少一點大小聲，多一點理性、多一點柔軟、用順暢的邏輯提供更多一點有用的資訊跟可靠的意見，或許更能讓對方接受自己的想法，這也是我一直在學習的。</p>\n<p>另外一點則是，自己回答任何人問題時，絕不能帶有僥倖心態，回覆前也要先反問自己，Am I satisfied with my own answer? 若不滿意自己現階段能給的答案，也要在核實或查明資料之後，再重新回答提問者，直到雙方都滿意為止。</p>\n<p>只是之間的界線偶爾卻會變得模糊，將給予自己的標準，也放在別人身上檢驗，導致有時候自己會作出沒那麼明智的選擇。</p>\n<p>大學時期有兩位對我而言極為重要的恩師，而其中幫助我走到現在人生道路的那位老師，當時因為我在某件事情做出了沒那麼明智的選擇，她告誡我說：「有時候對別人要有多一點的慈悲，多一點的寬容，或許才是比較柔軟的應對方式。」這句話我一直記在心裡。</p>\n<p>只能說，碩士班到目前為止的這一年來是更認識自己的過程。嚴以律己，寬以待人是一直在學習的課題。找到自己待人處事的堅持，並堅守底線，我，就還是原來的那個我；面對他人時多一點的寬容與慈悲，並認知到不同的選擇背後皆有考量，才是真正的成長。</p>\n","categories":["碎碎念"]},{"title":"【影評】親愛的房客","url":"/2022/08/30/%E3%80%90%E5%BD%B1%E8%A9%95%E3%80%91%E8%A6%AA%E6%84%9B%E7%9A%84%E6%88%BF%E5%AE%A2/","content":"<p>合歡山上的雨聲，隨著鋼琴聲悄悄地將觀眾帶進健一的世界。一座一座綿延不絕的合歡山山脈，團團白霧彷彿預示著健一、悠宇與阿嬤三人之間不可言說的複雜關係，時不時晃動的鏡頭，代表著三人的未知、不穩定的羈絆，也揭露了內心的種種不安。<br></br><br>沒有撕心裂肺地哭喊，也沒有死心塌地依戀，在電影中的每個人，好像就只能默默地慢慢向前走，突然發覺自己走不了的時候就稍微停下來休息一下，好好沈浸在過去幸福的片刻，覺得自己準備好了，再繼續往前走。<br></br><br>時刻都在處理「分離」的我們，即使內心充滿著疑問，即使知道傷口只是結痂，也只能隨時準備出發，因為不知道心裡那道缺口有沒有被填平的一刻，因為清楚無論如何，時間還是在走，日子還是得過，我們終究得抬起頭，緊緊抓住身邊所有。</p>\n<p><img src=\"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/%E8%8E%AB%E5%AD%90%E5%84%80%E8%88%87%E7%99%BD%E6%BD%A4%E9%9F%B3%E5%9C%A8-%E8%A6%AA%E6%84%9B%E7%9A%84%E6%88%BF%E5%AE%A2-%E6%9C%89%E4%B8%8D%E5%B0%91%E6%83%85%E6%84%9F%E5%90%83%E9%87%8D%E7%9A%84%E5%B0%8D%E6%89%8B%E6%88%B2-1604032024.jpg\"></p>\n<p>就像是被叔叔強帶著去看諮商師的悠宇一樣，心裡明明知道誰才是真正對自己好的人，小小的心靈卻仍充滿著對這位「爸爸二號」的疑問，但又不知道該如何表達內心的情緒，甚至是該如何開口。出來後，在基隆港沿岸，只能默默地向前走，任由這位「爸爸二號」在後面苦苦追著，直到知道自己再也受不了時，抬起頭轉身，問道：<br></br><br>「你到底是誰？」<br></br><br>這位「爸爸二號」也想知道自己為愛能夠跟這個社會對抗到什麼程度吧。為了能夠面對過去的自己，也要坦然面對阿嬤、悠宇跟叔叔的不諒解，同時為過去拆散對方家庭的自己贖罪，所以無怨無悔地為摯愛的母親換藥、為摯愛的兒子扣上釦子，撐起這家庭的一切。蒙上了陰影的愛情，該有多苦？緬懷著與立維的過去，看著扣著制服扣子的悠宇的現在，看向霧茫茫的未來，只能抓住現在身邊所有吧。畢竟在這荒蕪的世界中，我們都是人，我們都會犯錯。<br></br><br>「沒有我，你應該比較輕鬆吧？」<br>「我有你，我會比較快樂啊！」<br></br><br>這大概是健一活在這世上唯一能抓住的快樂，另一方面也是想把立維的愛留在身邊吧，就好像立維還在身邊一樣；渴望得到立維的愛，也渴望能獲得悠宇的認同。所以當健一聽到悠宇認他做「爸爸二號」時，或許在片刻，內心的缺口多少也暫時被填補了一些，才會忍不住哽咽。</p>\n<p><img src=\"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/%E8%8E%AB%E5%AD%90%E5%84%80%E8%88%87%E5%A7%9A%E6%B7%B3%E8%80%80%E5%9C%A8-%E8%A6%AA%E6%84%9B%E7%9A%84%E6%88%BF%E5%AE%A2-%E4%B8%AD%E6%9C%89%E4%B8%80%E6%AE%B5%E6%83%85-1604032024.jpg\"></p>\n<p>所以無論發生什麼事，他都很清楚自己必須盡其所能保護好悠宇與阿嬤，但他也知道年紀還小的悠宇有權必須知道這一切，至少在被警察逮捕之前，知道他是誰。於是就帶著悠宇前往那座當年失去摯愛的山上，本想著在不被打擾的情況下，跟悠宇、跟那個人、跟這座山一起度過好幾晚，卻因警察的追捕，只能抬起頭，繼續往前走。<br></br><br>內心也早有數的阿嬤，在面對著這位認為自己害死別人兒子的健一，大概也都看在眼裡了。兒子的死很痛，雖然內心深處大概也知道這不是任何人的錯，卻也還是有過不去的坎。最令人痛苦的，並不是過不去，而是明知自己必須過去，卻始終過不去，就像是《我們與惡的距離》宋喬安在電影院外的崩潰哭泣一般，過不去的，無論如何就是過不去。所以對阿嬤而言，也是需要很長一大段時間才有辦法療癒的痛吧，所以當她對健一說：<br></br><br>「你實在也是長得很緣投，難怪我兒子會被你煞到。」<br>「…」<br>「我…其實早就已經不怨你了。」<br></br><br>健一對自己跟悠宇的好，阿嬤都看在眼裡。只是要說出這句話，需要多少夜晚的掙扎、心痛？需要多少時間的療傷？需要多寬廣的慈悲？那些必須被放下的，始終放下了；那些說不出的悲戚，也逐漸隨著健一的愛被淡化了。</p>\n<p><img src=\"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/67df3920-181e-11eb-9f8f-2f29c6e143f7-1604032020.jpeg\"></p>\n<p>面對這一切，健一都默默地吞下去了。他知道這些都是為了保護阿嬤、也保護悠宇，所以在帳篷裡，在被警察拘捕之前的片刻，寫了封信給悠宇，並告訴他：<br></br><br>「你長大以後，也許會遇到很多很討厭、很莫名其妙的事。但無論發生什麼事，都不是你的錯。」<br></br><br>短短的一句話，其實是想告訴悠宇：阿嬤的死，不是你的錯；健一被捕，不是你的錯；未來那些種種的不合理，要記得那些都不是你的錯。<br></br><br>最後，讀了那封向自己認罪的坦誠之信，悠宇也決定坦承。因為他也感受到，原來健一把拔的苦，就好像覺得自己害死阿嬤一樣，那既然健一都鼓起勇氣了，所以悠宇才願意說出實話，為彼此承擔一切，一起抬起頭，一起背負著罪過，一起往前走。即使結局始終要面對著分離，只是內心的罪惡感都能稍微減輕一點了，只要有彼此在身邊，面對重重高山，就能蹽溪過嶺，就能有勇氣面對那些很討厭很莫名其妙的事。<br></br><br>電影的結尾讓我想起這學期選修讀的小說，石黑一雄的《別讓我走》（Never Let Me Go）最後Tommy對Kathy說的話：<br></br><br>「我一直在想像著某個畫面：有條河流，水流的非常湍急，有兩個人就站在河中央，死命地緊緊抱住彼此。但最後水流實在太強，這兩個人始終還是得放手，他們只好放開彼此，各自漂流。」<br></br><br><img src=\"https://images.squarespace-cdn.com/content/v1/57e05e534402434aa0f846c2/1485210458244-NRFPGVTKT14E5S2AYDZS/never-let-me-go-deferral.jpg\"><br></br><br>雖然小說講的是愛情，甚至是某種超越愛情的情感，但對健一與悠宇這對毫無血緣關係的父子又何嘗不是呢？即使社會如何亟力拆散兩人，始終還是得學會放手。而現在不再擁有悠宇監護權的健一，眼前所能擁有的，就是極力抓住那些過去珍貴的回憶，使其永不消褪，那也是健一現在唯一剩下的美好了。</p>\n","categories":["電影評論"]}]